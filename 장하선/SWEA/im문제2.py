"""
문제 복기:
NxN 크기의 격자판이 있다.
격자의 각 칸에는 정수가 하나씩 적혀 있다.
공은 어떤 칸에서 시작해서 상히좌우로 이동할 수 있다.
단, 이동할 수 있는 조건은 현재 칸보다 숫자가 작은 칸으로만 이동 가능하다.
이동할 때마다 공은 한 칸씩 이동하며, 이동할 수 있을 때까지 계속 이동한다.
가장 많이 이동할 수 있는 경우의 이동 횟수를 구하는 문제다. (정확히는, 출발칸을 포함한 "이동한 칸의 수"를 세는 것)
정리하면:
"어디서 출발하면 가장 많이 이동할 수 있는지 찾고, 그 최대 이동 수를 구하는 문제"
시작할 때 i,j칸에서 출발해서,
매번 인접한 칸(상, 하, 좌, 우) 중 자기보다 작은 값이 있으면 그쪽으로 이동
이동을 반복하다가 더 이상 갈 곳이 없으면 이동을 멈춘다
출발할 수 있는 모든 칸을 다 시도해서, 그중 가장 많은 이동 수를 찾는 문제
"""

T=int(input())
for tc in range(1,T+1):
    n=int(input())
    old_arr = [list(map(int, input().split())) for _ in range(n)]
    arr = [[999999 for _ in range(n+2)] for _ in range(n+2)]
    for i in range(n):
        for j in range(n):
            arr[i+1][j+1] = old_arr[i][j]
    dx=[1,-1,0,0]
    dy=[0,0,1,-1]
    for i in range(n):
        for j in range(n):
            x,y=i,j
            while True:
                